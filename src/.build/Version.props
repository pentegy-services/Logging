<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(Configuration)' != 'Debug' and '$(CanBeSigning)' == 'true' ">
    <PostBuildEventSigner>
      $(SignToolPath) sign /sha1 $(CertificateThumbprint) /f "$(CertificatePath)" /p $(CertificatePassword) /d "$(CertificateCompanyName)" /du $(CertificateSupportURL) /t $(CertificateTimeStampUrl) "$(TargetPath)"
      $(SignToolPath) sign /sha1 $(CertificateThumbprint) /f "$(CertificatePath)" /p $(CertificatePassword) /as /d "$(CertificateCompanyName)" /du $(CertificateSupportURL) /fd sha256 /tr $(CertificateTimeStampUrlRFC) /td sha256 "$(TargetPath)"
    </PostBuildEventSigner>
  </PropertyGroup>
  
  <PropertyGroup>
    <PostBuildEvent Condition=" '$(PostBuildEvent)' != '' ">
      $(PostBuildEvent)
      $(PostBuildEventSigner)
    </PostBuildEvent>
    <PostBuildEvent Condition=" '$(PostBuildEvent)' == '' ">$(PostBuildEventSigner)</PostBuildEvent>
  </PropertyGroup>

  <Choose>
    <When Condition=" !Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll') ">
      <PropertyGroup>
        <TasksAssemblyName>Microsoft.Build.Tasks.Core</TasksAssemblyName>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <TasksAssemblyName>Microsoft.Build.Tasks.v$(MSBuildToolsVersion)</TasksAssemblyName>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <UsingTask TaskName="ZipDir" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\$(TasksAssemblyName).dll">
    <ParameterGroup>
      <FileName ParameterType="System.String" Required="true" />
      <DirectoryName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try
        {
          Log.LogMessage(string.Format("Zipping Directory {0} to {1}", DirectoryName, FileName));
          ZipFile.CreateFromDirectory(DirectoryName, FileName, CompressionLevel.Fastest, false);
          return true;
        }
        catch(Exception ex)
        {
          Log.LogErrorFromException(ex);
          return false;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <Target Name="Publish" Condition=" '$(PublishToDir)' != '' ">
    <CreateItem Include="$(OutputPath)\**\*">
      <Output TaskParameter="Include" ItemName="Binaries" />
    </CreateItem>

    <PropertyGroup>
      <PublishName>$([System.String]::Copy(&quot;$(AssemblyName)&quot;).Replace(&quot;.Test&quot;,&quot;&quot;).Replace(&quot;.&quot;,&quot;-&quot;).ToLowerInvariant())</PublishName>
      <PublishToDir>$(PublishToDir)$(PublishName)</PublishToDir>
    </PropertyGroup>
    
    <Message Text="Publishing to $(PublishToDir)" />

    <Copy SkipUnchangedFiles="true" SourceFiles="@(Content)" DestinationFolder="$(PublishToDir)\%(Content.RelativeDir)" />
    <Copy SkipUnchangedFiles="true" 
          SourceFiles="app.config" 
          DestinationFiles="$(PublishToDir)\Web.config" 
          Condition="Exists('app.config')" />
    <Copy SkipUnchangedFiles="true" 
          SourceFiles="@(Binaries)" 
          DestinationFolder="$(PublishToDir)\%(RecursiveDir)" 
          Condition=" '$(ProjectTypeGuids)' != '{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}' " />
    <Copy SkipUnchangedFiles="true" 
          SourceFiles="@(Binaries)" 
          DestinationFolder="$(PublishToDir)\bin\%(RecursiveDir)" 
          Condition=" '$(ProjectTypeGuids)' == '{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}' " />

    <ZipDir DirectoryName="$(PublishToDir)" FileName="$(PublishToDir).zip" />

    <ItemGroup>
      <Files Include="$(PublishToDir)\**\*.*" />
      <Folders Include="$(PublishToDir)\**" />
    </ItemGroup>

    <Delete Files="@(Files)" />
    <RemoveDir Directories="$(Folders)" />
  </Target>
</Project>
